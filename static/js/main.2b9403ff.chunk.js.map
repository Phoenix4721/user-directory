{"version":3,"sources":["components/Userform/index.js","App.js","serviceWorker.js","index.js"],"names":["Userform","props","className","type","readOnly","placeholder","name","aria-label","aria-describedby","App","userlist","useState","users","setUsers","initUsers","setInitUsers","search","setSearch","userRequest","a","Axios","get","response","data","results","map","result","firstName","first","lastName","last","useEffect","swap","items","firstIndex","secondIndex","temp","userList","userObj","sortButton","onClick","userArray","console","log","tempArray","i","length","j","sortUsers","resetButton","value","onChange","target","filter","userEl","includes","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mSAUeA,MARf,SAAkBC,GAChB,OACE,yBAAKC,UAAU,oBACX,2BAAOC,KAAK,OAAOD,UAAU,yBAAyBE,UAAQ,EAACC,YAAa,KAAOJ,EAAMK,KAAMC,aAAW,iCAAiCC,mBAAiB,oB,iBC0FrJC,MAzFf,WACE,IAAIC,EAAW,GADF,EAKaC,mBAASD,GALtB,mBAKNE,EALM,KAKCC,EALD,OAMqBF,mBAHnB,IAHF,mBAMNG,EANM,KAMKC,EANL,OAOeJ,mBAAS,IAPxB,mBAONK,EAPM,KAOEC,EAPF,KASPC,EAAW,uCAAG,4BAAAC,EAAA,4DACD,wCADC,SAEKC,IAAMC,IADZ,yCADC,OAEZC,EAFY,OAGlBZ,EAAWY,EAASC,KAAKC,QAAQC,KAAI,SAACC,GACpC,MAAO,CACLC,UAAWD,EAAOpB,KAAKsB,MACvBC,SAAUH,EAAOpB,KAAKwB,SAG1BjB,EAASH,GACTK,EAAaL,GAVK,2CAAH,qDAajBqB,qBAAU,WACRb,MACC,IAEH,IAAMc,EAAO,SAASC,EAAOC,EAAYC,GACvC,IAAIC,EAAOH,EAAMC,GAGjB,OAFAD,EAAMC,GAAcD,EAAME,GAC1BF,EAAME,GAAeC,EACdH,GAyBHI,EAAWzB,EAAMa,KAAI,SAACa,GAAD,OACzB,kBAAC,EAAD,CAAUhC,KAAMgC,EAAQX,UAAY,IAAMW,EAAQT,cAG9CU,EAAa,4BAAQpC,KAAK,SAASD,UAAU,yBAAyBsC,QAAS,YA1BnE,SAASC,GACzBC,QAAQC,IAAI,mBAEZ,IADA,IAAIC,EAAS,YAAOH,GACXI,EAAE,EAAGA,EAAED,EAAUE,OAAQD,IAChC,IAAK,IAAIE,EAAEF,EAAGE,EAAEH,EAAUE,OAAQC,IAC5BH,EAAUG,GAAGlB,SAAWe,EAAUC,GAAGhB,WACvCa,QAAQC,IAAI,oBAAsBE,EAAI,gBAAkBE,GACxDH,EAAYZ,EAAKY,EAAWC,EAAGE,IAIrClC,EAAS+B,GACTF,QAAQC,IAAIjC,GAc8EsC,CAAUpC,KAAnF,6BAEbqC,EAAc,4BAAQ9C,KAAK,SAASD,UAAU,uBAAuBsC,QAAS,kBAAM3B,EAAS,YAAIC,MAAnF,0BAEpB,OACE,yBAAKZ,UAAU,OACb,wBAAIA,UAAU,eAAd,kBACA,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,SACZqC,EACAU,EACD,yBAAK/C,UAAU,oBACb,2BAAOC,KAAK,OAAOD,UAAU,eAAegD,MAAOlC,EAAQmC,SAAU,gBAAEC,EAAF,EAAEA,OAAF,OAAcnC,EAAUmC,EAAOF,UACpG,yBAAKhD,UAAU,sBACb,4BAAQsC,QA1BF,WAClBE,QAAQC,IAAI3B,GACZH,EAASD,EAAMyC,QAAO,SAAAC,GAAM,OAAIA,EAAOzB,SAAS0B,SAASvC,QAwBfd,UAAU,4BAA4BC,KAAK,SAASqD,GAAG,iBAArF,0BAIN,yBAAKtD,UAAU,SACZmC,GAEH,yBAAKnC,UAAU,cC3ELuD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.2b9403ff.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Userform(props) {\r\n  return (\r\n    <div className=\"input-group mb-3\">\r\n        <input type=\"text\" className=\"form-control-plaintext\" readOnly placeholder={\"  \" + props.name} aria-label=\"Example text with button addon\" aria-describedby=\"button-addon1\"/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Userform;","import React, { useState, useEffect } from 'react';\nimport './App.css';\n// import userlist from \"./users.json\";\nimport Userform from \"./components/Userform\";\nimport Axios from \"axios\";\n\nfunction App() {\n  let userlist = [];\n\n  let initList = [];\n  \n  const [users, setUsers] = useState(userlist);\n  const [initUsers, setInitUsers] = useState(initList);\n  const [search, setSearch] = useState(\"\");\n\n  const userRequest = async function() {\n    const queryUrl = \"https://randomuser.me/api/?results=20\";\n    const response = await Axios.get(queryUrl);\n    userlist = response.data.results.map((result) => {\n      return {\n        firstName: result.name.first,\n        lastName: result.name.last\n      }\n    });\n    setUsers(userlist);\n    setInitUsers(userlist);\n  }\n\n  useEffect(() => {\n    userRequest();  \n  }, []);\n\n  const swap = function(items, firstIndex, secondIndex) {\n    let temp = items[firstIndex];\n    items[firstIndex] = items[secondIndex];\n    items[secondIndex] = temp;\n    return items;\n  };\n\n  const sortUsers = function(userArray) {\n    console.log(\"button clicked!\");\n    let tempArray = [...userArray];\n    for (let i=0; i<tempArray.length; i++) {\n      for (let j=i; j<tempArray.length; j++) {\n        if (tempArray[j].lastName < tempArray[i].lastName) {\n          console.log(\"swapping element \" + i + \" and element \" + j);\n          tempArray = swap(tempArray, i, j);\n        }\n      }\n    }\n    setUsers(tempArray);\n    console.log(userlist);\n  };\n\n  const searchUsers = function() {\n    console.log(search);\n    setUsers(users.filter(userEl => userEl.lastName.includes(search)));\n  }\n  \n\n\n  const userList = users.map((userObj) => \n    <Userform name={userObj.firstName + \" \" + userObj.lastName} />\n  );\n\n  const sortButton = <button type=\"button\" className=\"btn btn-secondary mb-3\" onClick={() => {sortUsers(users)}}>Sort users alphabetically</button>;\n\n  const resetButton = <button type=\"button\" className=\"btn btn-success mb-3\" onClick={() => setUsers([...initUsers])}>Restore original users</button>;\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"text-center\">User Directory</h1>\n      <div className=\"container my-3\">\n        <div className=\"row\">\n          <div className=\"col-3\">\n            {sortButton}\n            {resetButton}\n            <div className=\"input-group mb-3\">\n              <input type=\"text\" className=\"form-control\" value={search} onChange={({target}) => setSearch(target.value)}/>\n              <div className=\"input-group-append\">\n                <button onClick={searchUsers} className=\"btn btn-outline-secondary\" type=\"button\" id=\"button-addon2\">Search by last name</button>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-6\">\n            {userList}\n          </div>\n          <div className=\"col-3\"/>\n        </div>\n      </div>\n    </div>\n  );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}